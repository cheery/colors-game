// Generated by CoffeeScript 1.6.3
(function() {
  window.startGame = function() {
    var canvas, ctx, magnitude, normalized;
    ctx = environ.ctx, canvas = environ.canvas;
    environ.messageHide = null;
    environ.message = "";
    environ.sendMessage = function(message, t) {
      environ.messageHide = t != null ? Date.now() / 1000 + t : null;
      return environ.message = message;
    };
    environ.randomColor = function(lives) {
      return '#' + Math.floor(Math.random() * 16777215).toString(16);
    };
    environ.resetGame = function() {
      environ.score = 0;
      environ.player = {
        position: [50, 50],
        velocity: [50, 0],
        control: [0, 0],
        speed: 600,
        steering: 2000,
        dead: false
      };
      environ.enemies = [
        {
          position: [150, 150],
          velocity: [150, 150],
          radius: 75,
          lives: 7,
          active: true,
          color: environ.randomColor(10)
        }
      ];
      environ.bullets = [];
      return environ.sendMessage("Destroy it", 4);
    };
    environ.resetGame();
    environ.keydown = function(code) {
      switch (code) {
        case 37:
          return environ.player.control[0] = -1.0;
        case 38:
          return environ.player.control[1] = -1.0;
        case 39:
          return environ.player.control[0] = +1.0;
        case 40:
          return environ.player.control[1] = +1.0;
      }
    };
    environ.shootBullet = function(player, target) {
      var dx, dy, mag, px, py, x, y, _ref;
      if (player.dead) {
        return;
      }
      x = target[0], y = target[1];
      _ref = player.position, px = _ref[0], py = _ref[1];
      dx = x - px;
      dy = y - py;
      mag = magnitude(dx, dy);
      if (mag > 0) {
        dx /= mag;
        dy /= mag;
      }
      return environ.bullets.push({
        position: [px, py],
        velocity: [dx * 500, dy * 500],
        t: Date.now() / 1000,
        hit: false
      });
    };
    environ.keyup = function(code) {
      switch (code) {
        case 37:
          return environ.player.control[0] = -0.0;
        case 38:
          return environ.player.control[1] = -0.0;
        case 39:
          return environ.player.control[0] = +0.0;
        case 40:
          return environ.player.control[1] = +0.0;
      }
    };
    environ.mousedown = function(x, y) {
      return environ.shootBullet(environ.player, environ.mouse);
    };
    normalized = function(vec) {
      var m, x, y;
      x = vec[0], y = vec[1];
      if ((m = magnitude(x, y)) > 0) {
        x /= m;
        y /= m;
      }
      return [x, y];
    };
    environ.enemyGain = 1.2;
    environ.deathZone = function(position, velocity) {
      var enemy, k, nx, ny, px, py, vx, vy, x, y, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      x = position[0], y = position[1];
      _ref = environ.enemies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        _ref1 = enemy.position, px = _ref1[0], py = _ref1[1];
        _ref2 = enemy.velocity, vx = _ref2[0], vy = _ref2[1];
        if (magnitude(x - px, y - py) < enemy.radius) {
          k = magnitude(vx, vy) * environ.enemyGain;
          _ref3 = normalized(velocity), nx = _ref3[0], ny = _ref3[1];
          nx += Math.random() - 0.5;
          ny += Math.random() - 0.5;
          _ref4 = normalized([nx, ny]), nx = _ref4[0], ny = _ref4[1];
          enemy.active = false;
          environ.score += 1;
          if (enemy.lives <= 1) {
            return true;
          }
          environ.enemies.push({
            position: [px, py],
            velocity: [-ny * k, nx * k],
            radius: enemy.radius - 10,
            lives: enemy.lives - 1,
            active: true,
            color: environ.randomColor(enemy.lives - 1)
          });
          environ.enemies.push({
            position: [px, py],
            velocity: [ny * k, -nx * k],
            radius: enemy.radius - 10,
            lives: enemy.lives - 1,
            active: true,
            color: environ.randomColor(enemy.lives - 1)
          });
          return true;
        }
      }
      return false;
    };
    environ.playerDeathZone = function(player) {
      var enemy, px, py, vx, vy, x, y, _i, _len, _ref, _ref1, _ref2, _ref3, _results;
      _ref = player.position, x = _ref[0], y = _ref[1];
      _ref1 = environ.enemies;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        enemy = _ref1[_i];
        _ref2 = enemy.position, px = _ref2[0], py = _ref2[1];
        _ref3 = enemy.velocity, vx = _ref3[0], vy = _ref3[1];
        if (magnitude(x - px, y - py) < enemy.radius) {
          player.dead = true;
          environ.sendMessage("Busted. " + environ.score + " kills.", 4);
          _results.push(setTimeout(environ.resetGame, 4000));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    magnitude = function(x, y) {
      return Math.sqrt(x * x + y * y);
    };
    environ.victory = false;
    environ.gameStep = function(t, dt) {
      var bullet, enemy, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (environ.player.dead) {
        return;
      }
      if (environ.victory) {
        return;
      }
      if (environ.enemies.length === 0) {
        environ.victory = true;
        environ.sendMessage("The end. It took " + environ.score + " hits.", null);
      }
      _ref = environ.mouse, x = _ref[0], y = _ref[1];
      environ.updatePlayer(environ.player, dt);
      _ref1 = environ.enemies;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        enemy = _ref1[_i];
        environ.updateEnemy(enemy, dt);
      }
      environ.enemies = environ.enemies.filter(function(enemy) {
        return enemy.active;
      });
      _ref2 = environ.bullets;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        bullet = _ref2[_j];
        environ.updateBullet(bullet, dt);
        bullet.hit = environ.deathZone(bullet.position, bullet.velocity);
      }
      environ.bullets = environ.bullets.filter(function(bullet) {
        return t < bullet.t + 1 && !bullet.hit;
      });
      return environ.playerDeathZone(environ.player);
    };
    environ.updateEnemy = function(enemy, dt) {
      var px, py, radius, vx, vy, _ref, _ref1;
      _ref = enemy.position, px = _ref[0], py = _ref[1];
      _ref1 = environ.noEscape(enemy.position, enemy.velocity, enemy.radius), vx = _ref1[0], vy = _ref1[1];
      radius = enemy.radius;
      px += vx * dt;
      py += vy * dt;
      enemy.velocity = [vx, vy];
      return enemy.position = [px, py];
    };
    environ.noEscape = function(_arg, _arg1, radius) {
      var px, py, vx, vy;
      px = _arg[0], py = _arg[1];
      vx = _arg1[0], vy = _arg1[1];
      if (vx < 0 && px - radius < 0) {
        vx = -vx;
      }
      if (vx > 0 && canvas.width < px + radius) {
        vx = -vx;
      }
      if (vy < 0 && py - radius < 0) {
        vy = -vy;
      }
      if (vy > 0 && canvas.height < py + radius) {
        vy = -vy;
      }
      return [vx, vy];
    };
    environ.updateBullet = function(bullet, dt) {
      var px, py, vx, vy, _ref, _ref1;
      _ref = bullet.position, px = _ref[0], py = _ref[1];
      _ref1 = bullet.velocity, vx = _ref1[0], vy = _ref1[1];
      px += vx * dt;
      py += vy * dt;
      bullet.velocity = [vx, vy];
      return bullet.position = [px, py];
    };
    environ.updatePlayer = function(player, dt) {
      var acc, cx, cy, px, py, smag, sx, sy, vx, vy, _ref, _ref1, _ref2;
      _ref = player.position, px = _ref[0], py = _ref[1];
      _ref1 = environ.noEscape(player.position, player.velocity, 10), vx = _ref1[0], vy = _ref1[1];
      _ref2 = player.control, cx = _ref2[0], cy = _ref2[1];
      sx = cx * player.speed - vx;
      sy = cy * player.speed - vy;
      smag = magnitude(sx, sy);
      acc = player.steering * dt;
      if (smag > acc) {
        sx = sx / smag * acc;
        sy = sy / smag * acc;
      }
      vx = vx + sx;
      vy = vy + sy;
      px += vx * dt;
      py += vy * dt;
      player.velocity = [vx, vy];
      return player.position = [px, py];
    };
    environ.drawMessage = function(t) {
      if ((environ.messageHide != null) && environ.messageHide < t) {
        return null;
      }
      ctx.textAlign = 'center';
      return ctx.fillText(environ.message, canvas.width / 2, canvas.height / 2);
    };
    environ.draw = function(t) {
      var bullet, enemy, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      environ.clearScreen();
      if (!environ.player.dead) {
        _ref = environ.mouse, x = _ref[0], y = _ref[1];
        ctx.fillStyle = 'red';
        environ.fillCircle(x, y, 7);
        ctx.fillStyle = 'white';
        environ.fillCircle(x, y, 5);
        ctx.fillStyle = 'black';
        _ref1 = environ.player.position, x = _ref1[0], y = _ref1[1];
        environ.fillCircle(x, y, 10 + 1 * Math.sin(t));
      }
      ctx.fillStyle = 'black';
      _ref2 = environ.bullets;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        bullet = _ref2[_i];
        _ref3 = bullet.position, x = _ref3[0], y = _ref3[1];
        environ.fillCircle(x, y, 5);
      }
      _ref4 = environ.enemies;
      for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
        enemy = _ref4[_j];
        _ref5 = enemy.position, x = _ref5[0], y = _ref5[1];
        ctx.fillStyle = enemy.color;
        environ.fillCircle(x, y, enemy.radius);
      }
      ctx.fillStyle = 'black';
      ctx.font = "20px sans-serif";
      return environ.drawMessage(t);
    };
    return environ.fillCircle = function(x, y, radius) {
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
      return ctx.fill();
    };
  };

}).call(this);
